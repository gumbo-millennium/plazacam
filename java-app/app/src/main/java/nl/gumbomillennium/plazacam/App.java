/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nl.gumbomillennium.plazacam;

import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;
import lombok.extern.slf4j.Slf4j;
import nl.gumbomillennium.plazacam.config.Config;

@Slf4j
public class App implements Runnable {
  private Config config;
  private WebcamController webcamController;
  private UploadController uploadController;

  public void loadConfig(String directory) {
    var configPath = Paths.get(directory, "config.json");
    var configController = new ConfigController(configPath.toFile());

    this.config = configController.getConfig();

    log.debug("Configuration loaded: {}", this.config);
  }

  public Config getConfig() {
    return config;
  }

  public CompletableFuture<Void> registerWebcams() {
    this.webcamController = new WebcamController();

    var registeredPromises = new ArrayList<CompletableFuture<Void>>();

    for (var camera : config.cameras) {
      registeredPromises.add(this.webcamController.registerWebcam(camera));
    }

    return CompletableFuture.allOf(registeredPromises.toArray(new CompletableFuture[0]));
  }

  public void registerUploader(String directory) {
    this.uploadController =
        new UploadController(directory, config.deviceName, config.uploadUrl, config.accessToken);
  }

  protected CompletableFuture<Image[]> getAllPhotos() {
    return webcamController.capture();
  }

  protected CompletableFuture<Void> uploadAllPhotos(Image[] photos) {
    return uploadController.upload(photos);
  }

  @Override
  public void run() {
    System.out.println("Capturing photos");
    var future = getAllPhotos();

    future.thenRun(
        () -> {
          System.out.println("Photos captured");
        });

    future
        .thenCompose(this::uploadAllPhotos)
        .thenRun(
            () -> {
              System.out.println("Photos uploaded");
            });
  }
}
